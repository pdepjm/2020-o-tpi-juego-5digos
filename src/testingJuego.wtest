import wollok.game.*
import balas.*
import estructuras.*
import movimientos.*
import niveles.*
import objectos.*
import personaje.*
import villano.*


describe "Movimientos del Personaje y colisiones con estructuras NO atravesables" {
	// recordar que personaje inicia en la posicion (1,1)
	test "personaje.ir(carpinchoRickDerecha) mueve al personaje 1 posicion hacia la derecha" {
		nivel1.iniciar()
		personaje.ir(carpinchoRickDerecha)
		assert.equals(game.at(2, 1), personaje.position())
	}
	
	test "personaje.ir(carpinchoRickIzquierda) no cambia la posicion del personaje dado que una pared se lo impide" {
		nivel1.iniciar()
		personaje.ir(carpinchoRickIzquierda)
		assert.equals(game.at(1, 1), personaje.position())
	}
	
	test "personaje.ir(carpinchoRickArriba) mueve al personaje 1 posicion hacia arriba" {
		nivel1.iniciar()
		personaje.ir(carpinchoRickArriba)
		assert.equals(game.at(1, 2), personaje.position())
	}
	
	test "personaje.ir(carpinchoRickAbajo) no cambia la posicion del personaje dado que una pared se lo impide" {
		nivel1.iniciar()
		personaje.ir(carpinchoRickAbajo)
		assert.equals(game.at(1, 1), personaje.position())
	}
}

describe "Colisiones de Balas"{
	// recordar que personaje inicia en la posicion (1,1)
	test "Bala colisiona contra ParedLadrillo o ParedExterior (no son rompibles)" {
		const nuevaPared = new ParedLadrillo(position = game.at(4,1))
		game.addVisual(nuevaPared)
		const balaPrueba = new Balas (position = personaje.position(), direccion = personaje.direccion(),danioDeBala=33)
		game.addVisual(balaPrueba)
		assert.that(nuevaPared.colisionConBala(balaPrueba))
	}
	
	test "Bala colisiona contra ParedTrucha (son rompibles)" {
		const nuevaPared = new ParedTrucha(position = game.at(4,1))
		game.addVisual(nuevaPared)
		const balaPrueba = new Balas (position = personaje.position(), direccion = personaje.direccion(),danioDeBala=33)
		game.addVisual(balaPrueba)
		assert.that(nuevaPared.colisionConBala(balaPrueba))
	}
	
	test "Bala colisiona contra Villano" {
		const villanoPrueba = new Villano (position = game.at(4,1),direccion = [zombieBabosoIzquierda])
		game.addVisual(villanoPrueba)
		const balaPrueba = new Balas (position = personaje.position(), direccion = personaje.direccion(),danioDeBala=33)
		game.addVisual(balaPrueba)
		assert.that(villanoPrueba.colisionConBala(balaPrueba))	
	}
}

describe "Efectos de Objetos"{
// recordar que personaje inicia en la posicion (1,1)
	test "Personaje con vida llena recoge pasto" {
		const pastoPrueba = new Pasto(cura = 33, position = game.at(1,1))
		game.addVisual(pastoPrueba)
		personaje.vida(99)
		pastoPrueba.efecto(personaje)
		assert.equals(personaje.vida(), 99)
	}
	
	test "Personaje con un tercio de vida recoge pasto" {
		const pastoPrueba = new Pasto(position = game.at(1,1), cura=33)
		game.addVisual(pastoPrueba)
		personaje.vida(33)
		pastoPrueba.efecto(personaje)
		assert.equals(personaje.vida(), 66)
	}

	test "Personaje con un tercio de vida recoge mate"{
		const matePrueba = new Mate(position = game.at(1,1), cura=100)
		game.addVisual(matePrueba)
		personaje.vida(33)
		matePrueba.efecto(personaje)
		assert.equals(personaje.vida(), 99)
	}

	test "Personaje sin balas recoge municion"{
		const municionPrueba = new Municion(position = game.at(1,1))
		game.addVisual(municionPrueba)
		personaje.municiones(0)
		municionPrueba.efecto(personaje)
		assert.equals(personaje.municiones(), 1)
	}
}

describe "Colision entre Personaje y Villano"{
// recordar que personaje inicia en la posicion (1,1)	
	test "Personaje colisiona con Villano y pierde vida"{
		const villanoBarraBrava = new Villano (position = game.at(2,1),direccion = [zombieBabosoIzquierda])
		game.addVisual(villanoBarraBrava)
		personaje.vida(99)
		villanoBarraBrava.chocasteCarpincho(personaje)
		assert.equals(personaje.vida(), 66)	
	}
	
}

describe "Personajes pierden partida"{
	
	test "algun personaje muere"{
		game.addVisual(personaje)
		personaje.vida(0)
		assert.that(personaje.perder())
	}
}

describe "Personajes ganan la partida"{
	
	test "todos los superVillanos mueren"{
		nivel1.iniciar()
		generarSuperVillano.superZombiesMuertos()
		assert.that(personaje.ganar())
	}
}